#pragma kernel Density
#include "SimplexNoise.compute"

static const int numThreads = 8;

// 区块坐标相关信息
RWStructuredBuffer<float4> points;
int numPointsPerAxis;
float boundsSize;
float3 centre;
float3 offset;
float spacing;
float3 worldSize;

// 噪声函数相关信息
StructuredBuffer<float3> offsets;
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;
float floorOffset;
float weightMultiplier;
bool closeEdges;
float hardFloorHeight;
float hardFloorWeight;
float4 params;

// 坐标索引
int indexFromCoord(int3 coord)
{
    return coord.x + coord.y * numPointsPerAxis + coord.z * numPointsPerAxis * numPointsPerAxis;
}

[numthreads(numThreads, numThreads, numThreads)]
void Density (int3 id: SV_DispatchThreadID)
{
    // 判断越界
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis)
        return;

    float3 pos = centre + (id * spacing) - (boundsSize * 0.5); // 坐标
    float offsetNoise = 0; // 偏移噪声

    float noise = 0;

    float frequency = noiseScale/100;
    float amplitude = 1;
    float weight = 1;

    // 多重柏林噪声
    for (int j =0; j < octaves; j ++) 
    {
        // 使用3DSimplex噪声,获得更好的三维地形效果
        float n = snoise((pos+offsetNoise) * frequency + offsets[j] + offset);

        float v = 1-abs(n);
        v = v*v;
        v *= weight;
        weight = max(min(v*weightMultiplier,1),0);
        noise += v * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    // 计算最终密度值
    // params可以用来调整地形的形态
    float finalVal = -(pos.y + floorOffset) + noise * noiseWeight + (pos.y%params.x) * params.y;

    // 为地形添加一个地平线基底
    if (pos.y < hardFloorHeight) {
        finalVal += hardFloorWeight;
    }

    // 为地形添加切面边缘效果
    if (closeEdges) {
        float3 edgeOffset = abs(pos*2)-worldSize + spacing/2;
        float edgeWeight = saturate(sign(max(max(edgeOffset.x,edgeOffset.y),edgeOffset.z)));
        finalVal = finalVal * (1-edgeWeight) - 100 * edgeWeight;
    }

    // 添加密度值到缓冲区
    int index = indexFromCoord(id);
    points[index] = float4(pos, finalVal);
}